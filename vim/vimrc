" General {{{
set encoding=utf-8              " Encoding
let s:codewidth=80              " Maximum line length (+1)
set timeoutlen=250
set ttimeoutlen=0
set modeline                    " Special comments for file-specific settings
" }}}
" Colors {{{
colorscheme justin              " vim/colors/justin.vim
syntax enable                   " Enable syntax processing
" Background color change at codewidth+1
let &colorcolumn=join(range(s:codewidth+1, 999), ",")
" }}}
" UI Layout {{{
set number                      " Show line numbers
filetype plugin indent on       " Filetype dependent indenting
set formatoptions=              " Clear default format options
set fillchars=stl:\ ,stlnc:\ ,vert:\ ,fold:-    " Fill Characters
"set formatoptions+=ro           " Auto insert comment leader
"set cursorline                  " Enable cursor line highlighting
"set scrolloff=999               " Lock cursor to middle of screen
" }}}
" Spaces & Tabs {{{
set softtabstop=4               " Number of spaces in tab when editing
set shiftwidth=4                " Number of spaces for >>> operations
set expandtab                   " Tabs are spaces
" }}}
" Text Wrapping {{{
let &textwidth=(s:codewidth-1)  " Set textwidth to codewidth variable
set formatoptions+=t            " Auto hard wrap text using textwidth
set formatoptions+=l            " Don't autowrap existing long lines
set formatoptions+=q            " Allow reformating with gq
set wrapmargin=0                " Don't wrap based on terminal size
" }}}
" Performance {{{
set lazyredraw
let synmaxcol=(s:codewidth*2)
syntax sync minlines=128
set ttyfast                     " Fast scrolling
set regexpengine=1              " Use older, faster regex engine
let loaded_matchparen = 1       " Disable parenthesis highlighting
" }}}
" Folding {{{
set foldenable                  " Enable folding
set foldlevelstart=10           " Open most folds by default
set foldnestmax=10              " 10 nested fold max
set foldmethod=indent           " Fold based on indent level
" Custom fold text function
function! FoldText()
    let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count = v:foldend - v:foldstart + 1
    let lines_count_text = ' (' . printf("%s", lines_count . ' lines') . ')'
    let foldchar = matchstr(&fillchars, 'fold:\zs.')
    let foldtextstart = strpart(repeat(' ', (v:foldlevel-1)*2) . '+' . line, 0, (winwidth(0)*2)/3)
    let foldtextend = lines_count_text
    let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart . repeat(foldchar, s:codewidth-1-foldtextlength) . foldtextend . repeat(' ', winwidth(0)-s:codewidth-1)
endfunction
set foldtext=FoldText()
" }}}
" Macros {{{
" General ---------------------------------------------------------------------
" Move vertically by visual line
nnoremap j gj
nnoremap k gk
" For yanking line consistency
nnoremap Y y$
" Remap <CR> to <Esc> in insert, visual, and select modes
inoremap <CR> <Esc>
vnoremap <CR> <Esc>
" <S-CR> is mapped to <F11> in Xresources
inoremap <F11> <CR>

" Insert Macros ---------------------------------------------------------------
"inoremap --<CR> <Esc>:call FillLine('-')<CR>o
"inoremap __<CR> <Esc>:call FillLine('_')<CR>o
"inoremap ==<CR> <Esc>:call FillLine('=')<CR>o
function! FillLine(char)
    set ve=all
    exe "normal $1lv79|r" . a:char
    set ve=
endfunction
" }}}
" Leader Key {{{
map <Space> <Leader>
" File
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>n :enew<CR>
" Folding
nnoremap <Leader>a za
" Navigation
nnoremap <Leader>z zz
nnoremap <Leader>h Hzz
nnoremap <Leader>l Lzz
nnoremap <Leader>m Mzz
" Editing
nnoremap <Leader>c cc
nnoremap <Leader>d dd
nnoremap <Leader>y yy
" Text wrap formatting
nnoremap <Leader>f vipgq
" Buffers
nnoremap <Leader>x :bp<CR>:bd #<CR>
"nnoremap <Leader>h :bprevious<CR>
"nnoremap <Leader>l :bnext<CR>
nnoremap <Leader>b :ls<CR>
" Addt
nnoremap <Leader>p :CtrlP<CR>
nnoremap <Leader>t :call NumberToggle()<CR>
" }}}
" Status Line {{{
set laststatus=2                "2-line status bar
let g:modename = {
    \ 'n'  : 'NORMAL',
    \ 'no' : 'N-OPERATOR',
    \ 'i'  : 'INSERT',
    \ 'R'  : 'REPLACE',
    \ 'Rv' : 'V-REPLACE',
    \ 'v'  : 'VISUAL',
    \ 'V'  : 'V-LINE',
    \ '^V' : 'V-BLOCK',
    \ 's'  : 'SELECT',
    \ 'S'  : 'S-LINE',
    \ '^S' : 'S-BLOCK',
    \ 'c'  : 'COMMAND',
    \ 'cv' : 'VIM-EX',
    \ 'ce' : 'EX',
    \ 'r'  : 'PROMPT',
    \ 'rm' : 'MORE',
    \ 'r?' : 'CONFIRM',
    \ '!'  : 'SHELL',
    \ 't'  : 'TERMINAL'
    \}
let g:modecolor = {
    \ 'n'  : '2',
    \ 'i'  : '3',
    \ 'v'  : '4'
    \}
function! SetStatusLine(mode)
    set statusline=
    "Set mode color
    exe "set statusline+=%".g:modecolor[a:mode]."*"     
    set statusline+=\                                   "Insert 1 space
    "Print mode name
    exe "set statusline+=".g:modename[a:mode]
    set statusline+=\ %1*\ %m                           "Modified?
    set statusline+=\ %<%F\                             "File+path
    set statusline+=%=%{strlen(&ft)?&ft:'none'}\        "Filetype
    set statusline+=%{''.(&fenc!=''?&fenc:&enc).''}\    "Encoding
    "Set mode color
    exe "set statusline+=%".g:modecolor[a:mode]."*"
    set statusline+=\ %03l:%03c\                        "Row and col
endfunction

autocmd InsertEnter * call SetStatusLine(v:insertmode)
autocmd InsertLeave * call SetStatusLine(mode())
autocmd BufEnter    * call SetStatusLine(mode())
" }}}
" Misc Plugins {{{
" PLUGINS =====================================================================
" Nerdtree --------------------------------------------------------------------
"let NERDTreeMinimalUI=1
"autocmd vimenter * NERDTree | wincmd p
"autocmd bufenter *
"    \ if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree())
"    \ | q | endif
"
" auto-pairs-gentle
let g:AutoPairsUseInsertedCount = 1
" better key bindings for UltiSnipsExpandTrigger
" <C-CR> is mapped to <F12> in Xresources
let g:UltiSnipsExpandTrigger = "<Tab>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwardTrigger = "<C-k>"
" Snippets directory
let g:UltiSnipsSnippetsDir = $HOME."/.vim/after/ultisnips"
let g:UltiSnipsSnippetDirectories = [$HOME.'/.vim/after/ultisnips']
" }}}
" Backup {{{
set directory^=$HOME/.vimswp//  " Swapfile directory
" }}}
" Custom Functions {{{
" Number of Active Buffers ----------------------------------------------------
function! NrBufs()
    let i = bufnr('$')
    let j = 0
    while i >= 1
        if buflisted(i)
            let j += 1
        endif
        let i -= 1
    endwhile
    return j
endfunction

" Toggle Relative Numbering ---------------------------------------------------
function! NumberToggle()
    if (&relativenumber == 1)
        set number
        set norelativenumber
    else
        set nonumber
        set relativenumber
    endif
endfunction
" }}}
" Modeline {{{
" vim:foldmethod=marker:foldlevel=0
" }}}
