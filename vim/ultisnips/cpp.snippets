# PRIORITY ====================================================================
priority 1
extends c
priority 2

# PREPROCESSOR ================================================================
snippet inc "#include <...>" b
#include <${1:iostream}>
endsnippet

# MISC ========================================================================
snippet alg "algorithm" w
algorithm
endsnippet

# MODIFIERS ===================================================================
snippet c "const" w
const ${0}
endsnippet

snippet h "std::" w
std::${0}
endsnippet

# NAMESPACES ==================================================================
snippet n "namespace" b
namespace {
    ${1}
}
endsnippet

snippet nn "namespace name" b
namespace ${1:ns} {
    ${2}
}
endsnippet

snippet n;; "namespace name = qualified"
namespace ${1:ns} = ${2};
endsnippet

# using -----------------------------------------------------------------------
snippet us "using ...;" b
using ${1};
endsnippet

snippet ush "using std::...;" b
using std::${1};
endsnippet

snippet us< "using std::cout;" b
using std::cout;
using std::endl;
endsnippet

snippet us> "using std::cin;" b
using std::cin;
endsnippet

snippet us<> "using std i/o" b
using std::cin;
using std::cout;
using std::endl;
endsnippet

snippet us>< "using std i/o" b
using std::cin;
using std::cout;
using std::endl;
endsnippet

snippet uss "using std::string" b
using std::string;
endsnippet

snippet usv "using std::vector" b
using std::vector;
endsnippet

snippet usl "using std::list" b
using std::list;
endsnippet

snippet usm "using std::map" b
using std::map;
endsnippet

# LOCAL DATA TYPES ============================================================
# const int -------------------------------------------------------------------
snippet c4 "const int" w
const int${0}
endsnippet

snippet c4; "const int ...;" b
const int ${1};
endsnippet

snippet c4;; "const int ... = ...;" b
const int ${1} = ${2:0};
endsnippet

# bool ------------------------------------------------------------------------
snippet b "bool" w
bool${0}
endsnippet

snippet b; "bool ...;" b
bool ${1};
endsnippet

snippet b;; "bool ... = ...;" b
bool ${1} = ${2:true};
endsnippet

# STRING ======================================================================
snippet s "string" w
string${0}
endsnippet

snippet s; "string ...;"
string ${1:s};
endsnippet

snippet s;; "string ... = '';"
string ${1:s} = "${2}";
endsnippet

# const string ----------------------------------------------------------------
snippet cs "const string" w
const string${0}
endsnippet

snippet cs; "const string ...;" b
const string ${1:s};
endsnippet

snippet cs;; "const string ... = '';" b
const string ${1:s} = "${2}";
endsnippet

# std::string -----------------------------------------------------------------
snippet hs "std::string" w
std::string${0}
endsnippet

snippet hs; "std::string ...;" b
std::string ${1:s};
endsnippet

snippet hs;; "std::string ... = '';" b
std::string ${1:s} = "${2}";
endsnippet

# const std::string -----------------------------------------------------------
snippet chs "const std::string" w
const std::string${0}
endsnippet

snippet chs; "const std::string ...;" b
const std::string ${1};
endsnippet

snippet chs;; "const std::string ... = '';" b
const std::string ${1} = "${2}";
endsnippet

# string::size_type -----------------------------------------------------------
snippet sz "string::size_type" w
string::size_type${0}
endsnippet

snippet sz; "string::size_type ...;"
string::size_type ${1};
endsnippet

snippet sz;; "string::size_type ... = ...;"
string::size_type ${1} = ${2:0};
endsnippet

# const string::size_type -----------------------------------------------------
snippet csz "const string::size_type" w
const string::size_type${0}
endsnippet

snippet csz; "const string::size_type ...;"
const string::size_type ${1};
endsnippet

snippet csz;; "const string::size_type ... = ..."
const string::size_type ${1} = ${2:0};
endsnippet

# std::string::size_type ------------------------------------------------------
snippet hsz "std::string::size_type" w
std::string::size_type${0}
endsnippet

snippet hsz; "std::string::size_type ...;"
std::string::size_type ${1};
endsnippet

snippet hsz;; "std::string::size_type ... = ..."
std::string::size_type ${1} = ${2:0};
endsnippet

# const std::string::size_type ------------------------------------------------
snippet chsz "const std::string::size_type" w
const std::string::size_type${0}
endsnippet

snippet chsz; "const std::string::size_type ...;"
const std::string::size_type ${1};
endsnippet

snippet chsz;; "const std::string::size_type ... = ...;"
const std::string::size_type ${1} = ${2:0};
endsnippet

# string::iterator ------------------------------------------------------------
snippet si "string::iterator" w
string::iterator${0}
endsnippet

snippet si; "string::iterator i;"
string::iterator ${1:i};
endsnippet

snippet si;; "string::iterator i = s.begin();"
string::iterator ${1:i} = ${2:s.begin()};
endsnippet

# string::const_iterator ------------------------------------------------------
snippet sci "string::const_iterator" w
string::const_iterator${0}
endsnippet

snippet sci; "string::const_iterator i;"
string::const_iterator${1:i};
endsnippet

snippet sci;; "string::const_iterator i = s.begin()"
string::const_iterator${1:i} = ${2:s.begin()};
endsnippet

# VECTOR ======================================================================
snippet v "vector" w
vector${0}
endsnippet

# vector<type> ----------------------------------------------------------------
snippet vt "vector<type>" w
vector<${1}>
endsnippet

snippet vt; "vector<type> ...;" b
vector<${1}> ${2:v};
endsnippet

# vector<type>::iterator ------------------------------------------------------
snippet vti "vector<type>::iterator" w
vector<${1}>::iterator
endsnippet

snippet vti; "vector<type>::iterator ...;"
vector<${1}>::iterator ${2};
endsnippet

snippet vti;; "vector<type>::iterator ... = ...;"
vector<${1}>::iterator ${2} = ${3};
endsnippet

# vector<type>::const_iterator ------------------------------------------------
snippet vtci "vector<type>::const_iterator" w
vector<${1}>::const_iterator
endsnippet

snippet vtci; "vector<type>::const_iterator ...;"
vector<${1}>::const_iterator ${2};
endsnippet

snippet vtci;; "vector<type>::const_iterator ... = ...;"
vector<${1}>::const_iterator ${2} = ${3};
endsnippet

# vector<type>::size_type -----------------------------------------------------
snippet vtz "vector<type>::size_type" w
vector<${1}>::size_type${0}
endsnippet

snippet vtz; "vector<type>::size_type ...;"
vector<${1}>::size_type ${2};
endsnippet

snippet vtz;; "vector<type>::size_type ... = ...;"
vector<${1}>::size_type ${2} = ${3:0};
endsnippet

# vector<int> -----------------------------------------------------------------
snippet v4 "vector<int>" w
vector<int>${0}
endsnippet

snippet v4; "vector<int> ...;" b
vector<int> ${1:v};
endsnippet

snippet v4z "vector<int>::size_type" w
vector<int>::size_type${0}
endsnippet

snippet v4z; "vector<int>::size_type ...;"
vector<int>::size_type ${1};
endsnippet

snippet v4z;; "vector<int>::size_type ... = ...;"
vector<int>::size_type ${1} = ${2:0};
endsnippet

# vector<double> --------------------------------------------------------------
snippet vd "vector<double>" w
vector<double>${0}
endsnippet

snippet vd; "vector<double> ...;" b
vector<double> ${1:v};
endsnippet

snippet vdz "vector<double>::size_type" w
vector<double>::size_type${0}
endsnippet

snippet vdz; "vector<double>::size_type ...;"
vector<double>::size_type ${1};
endsnippet

snippet vdz;; "vector<double>::size_type ... = ...;"
vector<double>::size_type ${1} = ${2:0};
endsnippet

# std::vector<double> ---------------------------------------------------------
snippet hvd "std::vector<double>" w
std::vector<double>${0}
endsnippet

snippet hvd; "std::vector<double> ...;"
std::vector<double> ${1:v};
endsnippet

snippet hvdz "std::vector<double>::size_type" w
std::vector<double>::size_type${0}
endsnippet

snippet hvdz; "std::vector<double>::size_type ...;"
std::vector<double>::size_type ${1};
endsnippet

snippet hvdz;; "std::vector<double>::size_type ... = ...;"
std::vector<double>::size_type ${1} = ${2:0};
endsnippet

# vector<string> --------------------------------------------------------------
snippet vs "vector<string>" w
vector<string>${0}
endsnippet

snippet vs; "vector<string> ...;" b
vector<string> ${1:v};
endsnippet

snippet vs;; "vector<string> ... = ...;"
vector<string> ${1:v} = ${2};
endsnippet

snippet vsz "vector<string>::size_type" w
vector<string>::size_type${0}
endsnippet

snippet vsz; "vector<string>::size_type ...;"
vector<string>::size_type ${1};
endsnippet

snippet vsz;; "vector<string>::size_type ... = ...;"
vector<string>::size_type ${1} = ${2:0};
endsnippet

# vector<string>::iterator ------------------------------------------------------
snippet vsi "vector<string>::iterator" w
vector<string>::iterator
endsnippet

snippet vsi; "vector<string>::iterator ...;"
vector<string>::iterator ${2:i};
endsnippet

snippet vsi;; "vector<string>::iterator ... = ...;"
vector<string>::iterator ${2:i} = ${3:v.begin()};
endsnippet

# vector<string>::const_iterator ------------------------------------------------------
snippet vsci "vector<string>::const_iterator" w
vector<string>::const_iterator
endsnippet

snippet vsci; "vector<string>::const_iterator ...;"
vector<string>::const_iterator ${2:i};
endsnippet

snippet vsci;; "vector<string>::const_iterator ... = ...;"
vector<string>::const_iterator ${2:i} = ${3:v.begin()};
endsnippet

# const vector<string> --------------------------------------------------------
snippet cvs "const vector<string>" w
const vector<string>${0}
endsnippet

snippet cvs; "const vector<string> ...;" b
const vector<string> ${1:v};
endsnippet

snippet cvs;; "const vector<string> ... = ...;"
const vector<string> ${1:v} = ${2};
endsnippet

snippet cvsz "const vector<string>::size_type" w
const vector<string>::size_type${0}
endsnippet

snippet cvsz; "const vector<string>::size_type ...;"
const vector<string>::size_type ${1};
endsnippet

snippet cvsz;; "const vector<string>::size_type ... = ...;"
const vector<string>::size_type ${1} = ${2:0};
endsnippet

# LIST ========================================================================
snippet l "list" w
list${0}
endsnippet

# list<type> ----------------------------------------------------------------
snippet lt "list<type>" w
list<${1:/* type */}>
endsnippet

snippet lt; "list<type> ...;" b
list<${1:/* type */}> ${2:l};
endsnippet

# list<type>::iterator ------------------------------------------------------
snippet lti "list<type>::iterator" w
list<${1:/* type */}>::iterator
endsnippet

snippet lti; "list<type>::iterator ...;"
list<${1:/* type */}>::iterator ${2:l};
endsnippet

snippet lti;; "list<type>::iterator ... = ...;"
list<${1:/* type */}>::iterator ${2:l} = ${3};
endsnippet

# list<type>::const_iterator ------------------------------------------------
snippet ltci "list<type>::const_iterator" w
list<${1:/* type */}>::const_iterator
endsnippet

snippet ltci; "list<type>::const_iterator ...;"
list<${1:/* type */}>::const_iterator ${2:i};
endsnippet

snippet ltci;; "list<type>::const_iterator ... = ...;"
list<${1:/* type */}>::const_iterator ${2:i} = ${3:l.begin()};
endsnippet

# list<type>::size_type -----------------------------------------------------
snippet ltz "list<type>::size_type" w
list<${1:/* type */}>::size_type${0}
endsnippet

snippet ltz; "list<type>::size_type ...;"
list<${1:/* type */}>::size_type ${2};
endsnippet

snippet ltz;; "list<type>::size_type ... = ...;"
list<${1:/* type */}>::size_type ${2} = ${3:0};
endsnippet

# MAP =========================================================================
# map<type, type> -------------------------------------------------------------
snippet m "map" w
map${0}
endsnippet

snippet mt "map<type, type>" w
map<${1}, ${2}>
endsnippet

snippet mt; "map<type, type> ...;" b
map<${1}, ${2}> ${3};
endsnippet

snippet mt;; "map<type, type> ... = ...;"
map<${1}, ${2}> ${3} = ${4};
endsnippet

# map<type, type>::size_type --------------------------------------------------
snippet mtz "map<type, type>::size_type" w
map<${1}, ${2}>::size_type${0}
endsnippet

snippet mtz; "map<type, type>::size_type ...;"
map<${1}, ${2}>::size_type ${3};
endsnippet

snippet mtz;; "map<type, type>::size_type ... = ...;"
map<${1}, ${2}>::size_type ${3} = ${4:0};
endsnippet

# map<type, type>::iterator ---------------------------------------------------
snippet mti "map<type, type>::iterator" w
map<${1}, ${2}>::iterator${0}
endsnippet

snippet mti; "map<type, type>::iterator"
map<${1}, ${2}>::iterator ${3};
endsnippet

snippet mti;; "map<type, type>::iterator ... = ...;"
map<${1}, ${2}>::iterator ${3} = ${4};
endsnippet

# map<type, type>::const_iterator ---------------------------------------------
snippet mtci "map<type, type>::const_iterator" w
map<${1}, ${2}>::const_iterator${0}
endsnippet

snippet mtci; "map<type, type>::const_iterator"
map<${1}, ${2}>::const_iterator ${3};
endsnippet

snippet mtci;; "map<type, type>::const_iterator ... = ...;"
map<${1}, ${2}>::const_iterator ${3} = ${4};
endsnippet

# CONDITIONALS ================================================================
# try/catch
snippet try "try/catch" b
try {
    ${1}
} catch (${2:/* exception */}) {
    ${3}
}
endsnippet

# LOOPS =======================================================================
# for -------------------------------------------------------------------------
snippet for "for"
for (${1:int} ${2:i} = ${3:0}; $2 != ${4:count}; ${5:++}$2) {
    ${6}
}
endsnippet

# while -----------------------------------------------------------------------
snippet wh "while" b
while (${1:false}) {
    ${2}
}
endsnippet

# INPUT/OUTPUT ================================================================
# cin/cout --------------------------------------------------------------------
snippet <> "istream" w
istream${0}
endsnippet

snippet >< "istream" w
istream${0}
endsnippet

snippet < "cout << ...;" b
cout << ${1};
endsnippet

snippet <n "cout << endl;" b
cout << endl;
endsnippet

snippet << "cout << ... << endl;" b
cout << ${1} << endl;
endsnippet

snippet > "cin >> ...;" b
cin >> ${1};
endsnippet

# std::cin/std::cout ----------------------------------------------------------
snippet h< "std::cout << ...;" b
std::cout << ${1};
endsnippet

snippet h<n "std::cout << std::endl;" b
std::cout << std::endl;
endsnippet

snippet h<< "std::cout << ... << std::endl;" b
std::cout << ${1} << std::endl;
endsnippet

snippet h> "std::cin >> ...;" b
std::cin >> ${1};
endsnippet

# streamsize ------------------------------------------------------------------
snippet ><z "streamsize" w
streamsize${0}
endsnippet

snippet ><z; "streamsize ...;" b
streamsize ${1};
endsnippet

snippet ><z;; "streamsize ... = ...;" b
streamsize ${1} = ${2};
endsnippet

snippet h><z "std::streamsize" w
std::streamsize${0}
endsnippet

snippet h><z; "std::streamsize ...;" b
std::streamsize ${1};
endsnippet

snippet h><z;; "std::streamsize ... = ...;" b
std::streamsize ${1} = ${2};
endsnippet

# TEMPLATE ====================================================================
snippet t "template" w
template
endsnippet

snippet tfun "template function" b
template <class ${1:T}>
${2:void} ${3:function_name}(${4})
{
    ${5}
}
endsnippet
