# PRIORITY ====================================================================
priority 1

# VARIABLES ===================================================================
# char ------------------------------------------------------------------------
snippet 1 "char" w
char${0}
endsnippet

snippet 1; "char ...;" b
char ${1};
endsnippet

snippet 1;; "char ... = ...;" b
char ${1} = ${2};
endsnippet

snippet 1p "char *..." w
char *${0}
endsnippet

snippet 1p; "char *...;" b
char *${1};
endsnippet

snippet 1p;; "char *... = ...;" b
char *${1} = ${2};
endsnippet

snippet 1a; "char ...[...];" b
char ${1}[${2}];
endsnippet

# char ------------------------------------------------------------------------
snippet c "char" w
char${0}
endsnippet

snippet c; "char ...;" b
char ${1};
endsnippet

snippet c;; "char ... = ...;" b
char ${1} = ${2};
endsnippet

snippet cp "char *..." w
char *${0}
endsnippet

snippet cp; "char *...;" b
char *${1};
endsnippet

snippet cp;; "char *... = ...;" b
char *${1} = ${2};
endsnippet

snippet ca; "char ...[...];" b
char ${1}[${2}];
endsnippet

# unsigned char ---------------------------------------------------------------
snippet u1 "unsigned char" w
unsigned char${0}
endsnippet

snippet u1; "unsigned char ...;" b
unsigned char ${1};
endsnippet

snippet u1;; "unsigned char ... = ...;" b
unsigned char ${1} = ${2};
endsnippet

snippet u1p "unsigned char *" w
unsigned char *${0}
endsnippet

snippet u1p; "unsigned char *...;" b
unsigned char *${1};
endsnippet

snippet u1p;; "unsigned char * ... = ...;" b
unsigned char *${1} = ${2};
endsnippet

snippet u1a; "unsigned char ...[...];" b
unsigned char ${1}[${2}];
endsnippet

# unsigned char ---------------------------------------------------------------
snippet uc "unsigned char" w
unsigned char${0}
endsnippet

snippet uc; "unsigned char ...;" b
unsigned char ${1};
endsnippet

snippet uc;; "unsigned char ... = ...;" b
unsigned char ${1} = ${2};
endsnippet

snippet ucp "unsigned char *" w
unsigned char *${0}
endsnippet

snippet ucp; "unsigned char *...;" b
unsigned char *${1};
endsnippet

snippet ucp;; "unsigned char * ... = ...;" b
unsigned char *${1} = ${2};
endsnippet

snippet uca; "unsigned char ...[...];" b
unsigned char ${1}[${2}];
endsnippet

# short -----------------------------------------------------------------------
snippet 2 "short" w
short${0}
endsnippet

snippet 2; "short ...;" b
short ${1};
endsnippet

snippet 2;; "short ... = ...;" b
short ${1} = ${2};
endsnippet

snippet 2p "short *" w
short *${0}
endsnippet

snippet 2p; "short *...;" b
short *${1};
endsnippet

snippet 2p;; "short *... = ...;" b
short *${1} = ${2};
endsnippet

snippet 2a; "short ...[...];" b
short ${1}[${2}];
endsnippet

# short -----------------------------------------------------------------------
snippet s "short" w
short${0}
endsnippet

snippet s; "short ...;" b
short ${1};
endsnippet

snippet s;; "short ... = ...;" b
short ${1} = ${2};
endsnippet

snippet sp "short *" w
short *${0}
endsnippet

snippet sp; "short *...;" b
short *${1};
endsnippet

snippet sp;; "short *... = ...;" b
short *${1} = ${2};
endsnippet

snippet sa; "short ...[...];" b
short ${1}[${2}];
endsnippet

# unsigned short --------------------------------------------------------------
snippet u2 "unsigned short" w
unsigned short${0}
endsnippet

snippet u2; "unsigned short ...;" b
unsigned short ${1};
endsnippet

snippet u2;; "unsigned short ... = ...;" b
unsigned short ${1} = ${2};
endsnippet

snippet u2p "unsigned short *" w
unsigned short *${0}
endsnippet

snippet u2p; "unsigned short *...;" b
unsigned short *${1};
endsnippet

snippet u2p;; "unsigned short *... = ...;" b
unsigned short *${1} = ${2};
endsnippet

snippet u2a; "unsigned short ...[...];" b
unsigned short ${1}[${2}];
endsnippet

# unsigned short --------------------------------------------------------------
snippet us "unsigned short" w
unsigned short${0}
endsnippet

snippet us; "unsigned short ...;" b
unsigned short ${1};
endsnippet

snippet us;; "unsigned short ... = ...;" b
unsigned short ${1} = ${2};
endsnippet

snippet usp "unsigned short *" w
unsigned short *${0}
endsnippet

snippet usp; "unsigned short *...;" b
unsigned short *${1};
endsnippet

snippet usp;; "unsigned short *... = ...;" b
unsigned short *${1} = ${2};
endsnippet

snippet usa; "unsigned short ...[...];" b
unsigned short ${1}[${2}];
endsnippet

# int -------------------------------------------------------------------------
snippet 4 "int" w
int${0}
endsnippet

snippet 4; "int ...;" b
int ${1:n};
endsnippet

snippet 4;; "int ... = ...;" b
int ${1:n} = ${2:0};
endsnippet

snippet 4p "int *" w
int *${0:ptr}
endsnippet

snippet 4p; "int *...;" b
int *${1:ptr};
endsnippet

snippet	4p;; "int *... = ...;" b
int *${1ptr} = ${2};
endsnippet

snippet 4a; "int ...[...];" b
int ${1}[${2}];
endsnippet

# int -------------------------------------------------------------------------
snippet i "int" w
int${0}
endsnippet

snippet i; "int ...;" b
int ${1:n};
endsnippet

snippet i;; "int ... = ...;" b
int ${1:n} = ${2:0};
endsnippet

snippet ip "int *" w
int *${0:ptr}
endsnippet

snippet ip; "int *...;" b
int *${1:ptr};
endsnippet

snippet	ip;; "int *... = ...;" b
int *${1ptr} = ${2};
endsnippet

snippet ia; "int ...[...];" b
int ${1}[${2}];
endsnippet

# unsigned --------------------------------------------------------------------
snippet u4 "unsigned" w
unsigned${0}
endsnippet

snippet u4; "unsigned ...;" b
unsigned ${1};
endsnippet

snippet u4;; "unsigned ... = ...;" b
unsigned ${1} = ${2};
endsnippet

snippet u4p "unsigned *" w
unsigned *${0}
endsnippet

snippet u4p; "unsigned *...;" b
unsigned *${1};
endsnippet

snippet u4p;; "unsigned *... = ...;" b
unsigned *${1} = ${2};
endsnippet

snippet u4a; "unsigned ...[...];" b
unsigned ${1}[${2}];
endsnippet

# unsigned --------------------------------------------------------------------
snippet u "unsigned" w
unsigned${0}
endsnippet

snippet u; "unsigned ...;" b
unsigned ${1};
endsnippet

snippet u;; "unsigned ... = ...;" b
unsigned ${1} = ${2};
endsnippet

snippet up "unsigned *" w
unsigned *${0}
endsnippet

snippet up; "unsigned *...;" b
unsigned *${1};
endsnippet

snippet up;; "unsigned *... = ...;" b
unsigned *${1} = ${2};
endsnippet

snippet ua; "unsigned ...[...];" b
unsigned ${1}[${2}];
endsnippet

# long ------------------------------------------------------------------------
snippet 8 "long" w
long${0}
endsnippet

snippet 8; "long ...;" b
long ${1};
endsnippet

snippet 8;; "long ... = ...;" b
long ${1} = ${2};
endsnippet

snippet 8p "long *" w
long *${0}
endsnippet

snippet 8p; "long *...;" b
long *${1};
endsnippet

snippet 8p;; "long *... = ...;" b
long *${1} = ${2};
endsnippet

snippet 8a; "long ...[...];" b
long ${1}[${2}];
endsnippet

# long ------------------------------------------------------------------------
snippet l "long" w
long${0}
endsnippet

snippet l; "long ...;" b
long ${1};
endsnippet

snippet l;; "long ... = ...;" b
long ${1} = ${2};
endsnippet

snippet lp "long *" w
long *${0}
endsnippet

snippet lp; "long *...;" b
long *${1};
endsnippet

snippet lp;; "long *... = ...;" b
long *${1} = ${2};
endsnippet

snippet la; "long ...[...];" b
long ${1}[${2}];
endsnippet

# unsigned long ---------------------------------------------------------------
snippet u8 "unsigned long" w
unsigned long${0}
endsnippet

snippet u8; "unsigned long ...;" b
unsigned long ${1};
endsnippet

snippet u8;; "unsigned long ... = ...;" b
unsigned long ${1} = ${2};
endsnippet

snippet u8p "unsigned long *" w
unsigned long *${0}
endsnippet

snippet u8p; "unsigned long *...;" b
unsigned long *${1};
endsnippet

snippet u8p;; "unsigned long *... = ...;" b
unsigned long *${1} = ${2};
endsnippet

snippet u8a; "unsigned long ...[...];" b
unsigned long ${1}[${2}];
endsnippet

# unsigned long ---------------------------------------------------------------
snippet ul "unsigned long" w
unsigned long${0}
endsnippet

snippet ul; "unsigned long ...;" b
unsigned long ${1};
endsnippet

snippet ul;; "unsigned long ... = ...;" b
unsigned long ${1} = ${2};
endsnippet

snippet ulp "unsigned long *" w
unsigned long *${0}
endsnippet

snippet ulp; "unsigned long *...;" b
unsigned long *${1};
endsnippet

snippet ulp;; "unsigned long *... = ...;" b
unsigned long *${1} = ${2};
endsnippet

snippet ula; "unsigned long ...[...];" b
unsigned long ${1}[${2}];
endsnippet

# int32_t ---------------------------------------------------------------------
snippet 32 "int32_t" w
int32_t${0}
endsnippet

snippet 32; "int32_t ...;" b
int32_t ${1};
endsnippet

snippet 32;; "int32_t ... = ...;" b
int32_t ${1} = ${2};
endsnippet

snippet 32p "int32_t *" w
int32_t *${0}
endsnippet

snippet 32p; "int32_t *...;" b
int32_t *${1};
endsnippet

snippet 32p;; "int32_t *... = ...;" b
int32_t *${1} = ${2};
endsnippet

snippet 32a; "int32_t ...[...];" b
int32_t ${1}[${2}];
endsnippet

# uint32_t --------------------------------------------------------------------
snippet u32 "uint32_t" w
uint32_t${0}
endsnippet

snippet u32; "uint32_t ...;" b
uint32_t ${1};
endsnippet

snippet u32;; "uint32_t ... = ...;" b
uint32_t ${1} = ${2};
endsnippet

snippet u32p "uint32_t *" w
uint32_t *${0}
endsnippet

snippet u32p; "uint32_t *...;" b
uint32_t *${1};
endsnippet

snippet u32p;; "uint32_t *... = ...;" b
uint32_t *${1} = ${2};
endsnippet

snippet u32a; "uint32_t ...[...];" b
uint32_t ${1}[${2}];
endsnippet

# int64_t ---------------------------------------------------------------------
snippet 64 "int64_t" w
int64_t${0}
endsnippet

snippet 64; "int64_t ...;" b
int64_t ${1};
endsnippet

snippet 64;; "int64_t ... = ...;" b
int64_t ${1} = ${2};
endsnippet

snippet 64p "int64_t *" w
int64_t *${0}
endsnippet

snippet 64p; "int64_t *...;" b
int64_t *${1};
endsnippet

snippet 64p;; "int64_t *... = ...;" b
int64_t *${1} = ${2};
endsnippet

snippet 64a; "int64_t ...[...];" b
int64_t ${1}[${2}];
endsnippet

# uint64_t --------------------------------------------------------------------
snippet u64 "uint64_t" w
uint64_t${0}
endsnippet

snippet u64; "uint64_t ...;" b
uint64_t ${1};
endsnippet

snippet u64;; "uint64_t ... = ...;" b
uint64_t ${1} = ${2};
endsnippet

snippet u64p "uint64_t *" w
uint64_t *${0}
endsnippet

snippet u64p; "uint64_t *...;" b
uint64_t *${1};
endsnippet

snippet u64p;; "uint64_t *... = ...;" b
uint64_t *${1} = ${2};
endsnippet

snippet u64a; "uint64_t ...[...];" b
uint64_t ${1}[${2}];
endsnippet

# size_t ----------------------------------------------------------------------
snippet z "size_t" w
size_t${0}
endsnippet

snippet z; "size_t ...;" b
size_t ${1};
endsnippet

snippet z;; "size_t ... = ...;" b
size_t ${1} = ${2};
endsnippet

snippet zp "size_t *" w
size_t *${0}
endsnippet

snippet zp; "size_t *...;" b
size_t *${1};
endsnippet

snippet zp;; "size_t *... = ...;" b
size_t *${1} = ${2};
endsnippet

snippet za; "size_t ...[...];" b
size_t ${1}[${2}];
endsnippet

# float -----------------------------------------------------------------------
snippet f "float" w
float${0}
endsnippet

snippet f; "float ...;" b
float ${1};
endsnippet

snippet f;; "float ... = ...;" b
float ${1:f} = ${2:0};
endsnippet

snippet fp "float *" w
float *${0}
endsnippet

snippet fp; "float *...;" b
float *${1};
endsnippet

snippet fp;; "float *... = ...;" b
float *${1} = ${2};
endsnippet

snippet fa; "float ...[...];" b
float ${1}[${2}];
endsnippet

# double ----------------------------------------------------------------------
snippet d "double" w
double${0}
endsnippet

snippet d; "double ...;" b
double ${1};
endsnippet

snippet d;; "double ... = ...;" b
double ${1:d} = ${2:0};
endsnippet

snippet dp "double *" w
double *${0}
endsnippet

snippet dp; "double *...;" b
double *${1};
endsnippet

snippet dp;; "double *... = ...;" b
double *${1} = ${2};
endsnippet

snippet da; "double ...[...];" b
double ${1}[${2}];
endsnippet

# STATEMENTS ==================================================================
snippet ; "...;" b
${1:/* type */} ${2:/* name */};
endsnippet

snippet ;; "... = ...;" b
${1:/* type */} ${2:/* name */} = ${3:/* value */};
endsnippet

# CONDITIONALS ================================================================
# if/else ---------------------------------------------------------------------
snippet if "if" b
if (${1:true}) {
    ${2}
}
endsnippet

snippet iff "if (false)" b
if (${1:false}) {
    ${2}
}
endsnippet

snippet if; "if (true) ...;" b
if (${1:true}) ${2};
endsnippet

snippet iff; "if (false) ...;" b
if (${1:false}) ${2};
endsnippet

snippet ife "if/else" b
if (${1:true}) {
    ${2}
} else {
    ${3}
}
endsnippet

snippet iffe "if/else (false)" b
if (${1:false}) {
    ${2}
} else {
    ${3}
}
endsnippet

snippet el "else"
else {
    ${1}
}
endsnippet

snippet elif "else if"
else if (${1:true}) {
    ${2}
}
endsnippet

snippet eliff "else if (false)"
else if (${1:false}) {
    ${2}
}
endsnippet

# LOOPS =======================================================================
# for -------------------------------------------------------------------------
snippet for "for"
for (${1:i} = ${2:0}; $1 != ${3:count}; ${4:++}$1) {
    ${5}
}
endsnippet

# while -----------------------------------------------------------------------
snippet wh "while" b
while (${1:0}) {
    ${2}
}
endsnippet

snippet do "do/while" b
do {
    ${2}
} while (${1: /* condition */});
endsnippet

# FUNCTIONS ===================================================================
# main ------------------------------------------------------------------------
snippet main "main()" b
int main()
{
    ${1}
    return 0;
}
endsnippet

snippet mainn "main(int argc, const char *argv[])" b
int main(int argc, const char *argv[])
{
    ${1}
    return 0;
}
endsnippet

# function --------------------------------------------------------------------
snippet fun "function definition" b
${1:void} ${2:function_name}(${3})
{
    ${4}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

# PREPROCESSOR ================================================================
snippet inc "#include <...>" b
#include <${1:stdio}.h>
endsnippet

snippet incc "#include '...'" b
#include "${1:`!v expand('%:t:r')`}.h"
endsnippet

snippet guard "#ifndef" b
#ifndef $2$1$3
#define ${2:GUARD_}${1:`!v expand('%:t:r')`}${3:_h}

// `!v expand('%:t')`
${4}

#endif
endsnippet

# MISC ========================================================================
snippet td "typedef " w
typedef ${0}
endsnippet

snippet struct "struct" b
struct ${1:struct_name} {
    ${2}
};
endsnippet
